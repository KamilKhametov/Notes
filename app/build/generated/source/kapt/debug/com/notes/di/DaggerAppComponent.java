// Generated by Dagger (https://dagger.dev).
package com.notes.di;

import android.content.Context;
import com.notes.data.NoteDatabase;
import com.notes.di.components.NoteAddComponent;
import com.notes.di.components.NoteDetailComponent;
import com.notes.di.components.NoteListComponent;
import com.notes.ui.add.NoteAddFragment;
import com.notes.ui.add.NoteAddFragment_MembersInjector;
import com.notes.ui.details.NoteDetailsFragment;
import com.notes.ui.details.NoteDetailsFragment_MembersInjector;
import com.notes.ui.list.NoteListFragment;
import com.notes.ui.list.NoteListFragment_MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.Preconditions;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final AppModule appModule;

  private final Context bindsApplication;

  private final DaggerAppComponent appComponent = this;

  private DaggerAppComponent(AppModule appModuleParam, Context bindsApplicationParam) {
    this.appModule = appModuleParam;
    this.bindsApplication = bindsApplicationParam;

  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private NoteListViewModelFactory noteListViewModelFactory() {
    return new NoteListViewModelFactory(getNoteDatabase());
  }

  private AddViewModelFactory addViewModelFactory() {
    return new AddViewModelFactory(getNoteDatabase());
  }

  private DetailViewModelFactory detailViewModelFactory() {
    return new DetailViewModelFactory(getNoteDatabase());
  }

  @Override
  public NoteDatabase getNoteDatabase() {
    return AppModule_ProvideNoteDatabaseFactory.provideNoteDatabase(appModule, bindsApplication);
  }

  @Override
  public NoteListComponent.Builder noteListComponent() {
    return new NoteListComponentBuilder(appComponent);
  }

  @Override
  public NoteAddComponent.Builder noteAddComponent() {
    return new NoteAddComponentBuilder(appComponent);
  }

  @Override
  public NoteDetailComponent.Builder noteDetailComponent() {
    return new NoteDetailComponentBuilder(appComponent);
  }

  private static final class Builder implements AppComponent.Builder {
    private Context bindsApplication;

    @Override
    public Builder bindsApplication(Context context) {
      this.bindsApplication = Preconditions.checkNotNull(context);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(bindsApplication, Context.class);
      return new DaggerAppComponent(new AppModule(), bindsApplication);
    }
  }

  private static final class NoteListComponentBuilder implements NoteListComponent.Builder {
    private final DaggerAppComponent appComponent;

    private NoteListComponentBuilder(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public NoteListComponent build() {
      return new NoteListComponentImpl(appComponent);
    }
  }

  private static final class NoteAddComponentBuilder implements NoteAddComponent.Builder {
    private final DaggerAppComponent appComponent;

    private NoteAddComponentBuilder(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public NoteAddComponent build() {
      return new NoteAddComponentImpl(appComponent);
    }
  }

  private static final class NoteDetailComponentBuilder implements NoteDetailComponent.Builder {
    private final DaggerAppComponent appComponent;

    private NoteDetailComponentBuilder(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public NoteDetailComponent build() {
      return new NoteDetailComponentImpl(appComponent);
    }
  }

  private static final class NoteListComponentImpl implements NoteListComponent {
    private final DaggerAppComponent appComponent;

    private final NoteListComponentImpl noteListComponentImpl = this;

    private NoteListComponentImpl(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;


    }

    @Override
    public void inject(NoteListFragment fragment) {
      injectNoteListFragment(fragment);
    }

    private NoteListFragment injectNoteListFragment(NoteListFragment instance) {
      NoteListFragment_MembersInjector.injectViewModelFactory(instance, appComponent.noteListViewModelFactory());
      return instance;
    }
  }

  private static final class NoteAddComponentImpl implements NoteAddComponent {
    private final DaggerAppComponent appComponent;

    private final NoteAddComponentImpl noteAddComponentImpl = this;

    private NoteAddComponentImpl(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;


    }

    @Override
    public void inject(NoteAddFragment fragment) {
      injectNoteAddFragment(fragment);
    }

    private NoteAddFragment injectNoteAddFragment(NoteAddFragment instance) {
      NoteAddFragment_MembersInjector.injectViewModelFactory(instance, appComponent.addViewModelFactory());
      return instance;
    }
  }

  private static final class NoteDetailComponentImpl implements NoteDetailComponent {
    private final DaggerAppComponent appComponent;

    private final NoteDetailComponentImpl noteDetailComponentImpl = this;

    private NoteDetailComponentImpl(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;


    }

    @Override
    public void inject(NoteDetailsFragment fragment) {
      injectNoteDetailsFragment(fragment);
    }

    private NoteDetailsFragment injectNoteDetailsFragment(NoteDetailsFragment instance) {
      NoteDetailsFragment_MembersInjector.injectViewModelFactory(instance, appComponent.detailViewModelFactory());
      return instance;
    }
  }
}
